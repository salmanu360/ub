<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\controllers\base;

use yii;
use common\models\User;
use common\models\History;
use backend\models\search\User as UserSearch;
use yii\web\Controller;
use yii\web\HttpException;
use yii\helpers\Url;
use yii\filters\AccessControl;
use dmstr\bootstrap\Tabs;
use common\models\ModulesPermission;
use common\components\ActionPermission as ActionPermissionComponent;

/**
* UserController implements the CRUD actions for User model.
*/
class UserController extends Controller
{

public function behaviors()
    {
        $actions = ActionPermissionComponent::getModuleAction(ModulesPermission::MODULE_USERS);
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => $actions,
            ]
        ];
    }
/**
* @var boolean whether to enable CSRF validation for the actions in this controller.
* CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
*/
public $enableCsrfValidation = false;


/**
* Lists all User models.
* @return mixed
*/
public function actionIndex()
{

    /*var_dump(\Yii::$app->user->identity->id);
    var_dump(\Yii::$app->user->identity->type);
    die();*/
    $searchModel  = new UserSearch;
    $dataProvider = $searchModel->search($_GET);

Tabs::clearLocalStorage();

Url::remember();
\Yii::$app->session['__crudReturnUrl'] = null;

return $this->render('index', [
'dataProvider' => $dataProvider,
    'searchModel' => $searchModel,
]);
}

public function actionUserAccess($user_id){
        $user = User::find()->where(['id'=>$user_id])->one();
        $modulesPermission = new ModulesPermission;
        $modules = $modulesPermission->getPermission($user_id);
        if(Yii::$app->request->isPost){
           $transaction = Yii::$app->db->beginTransaction(); 
         try{ 
           $flag = true; 
           $postData = Yii::$app->request->post()['ModulesPermission'];
           //echo "<pre>";print_r($postData);die();
           $modules = $postData;
           foreach($postData as $data){
              $model = ModulesPermission::find()->where(['user_id'=>$user_id,'module'=>$data['module']])->one();
              if(empty($model)){
                 $model = new ModulesPermission;
              }
              $data['user_id'] = $user_id;
              $modelData['ModulesPermission'] = $data; 
              $model->load($modelData);
              if(!$model->save()){
                 $flag = false;
                 break;
              }
           }

           if($flag){
              $transaction->commit();
              Yii::$app->session->setFlash('success', Yii::t('occ','Permission changed successfully.'));
              return $this->redirect(['user-access','user_id'=>$user_id]); 
           }else{
              $transaction->rollBack();
              Yii::$app->session->setFlash('error', Yii::t('occ',$model->getErrors()[0]));
           }
          }catch (\Exception $e) {
            $transaction->rollBack();
            $msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
            $model->addError('_exception', $msg);
          }
        }

        //echo "<pre>";print_r($modules);die();
        return $this->render('user-access',[
               'user_id' => $user_id,
               'modules' =>$modules, 
               'model' => $modulesPermission,
               'user'=>$user
        ]);

    }

/**
* Displays a single User model.
* @param integer $id
*
* @return mixed
*/
public function actionView($id)
{
\Yii::$app->session['__crudReturnUrl'] = Url::previous();
Url::remember();
Tabs::rememberActiveState();

return $this->render('view', [
'model' => $this->findModel($id),
]);
}

/**
* Creates a new User model.
* If creation is successful, the browser will be redirected to the 'view' page.
* @return mixed
*/
public function actionCreate()
{

        $model = new User;
       if ($model->load(\Yii::$app->request->post()) && $model->validate()) {
                try {

                       $model->type=0;
                        $transaction = \Yii::$app->db->beginTransaction();
                        $model->generateAuthKey();
                        $model->setPassword($_POST['User']['password']);                       
                     if($model->save()){

                            // $history = new History;
                            // $history->saveHistory(History::TYPE_USER,$model->id,"Created");
                            $transaction->commit();                            
                        }
                        else{
                            \Yii::debug($model);
                            throw new Exception;
                        }
                      //  $transaction->commit();
                } catch (\Exception $e) {
                       throw $e;
                        $transaction->rollBack();
                        $msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
                        $model->addError('_exception', $msg);
                }
              
                   return $this->redirect(['view', 'id' => $model->id]);
                

        }elseif (!\Yii::$app->request->isPost) {           
              $model->load($_GET);

        }
        return $this->render('create', ['model' => $model]);
}

/**
* Updates an existing User model.
* If update is successful, the browser will be redirected to the 'view' page.
* @param integer $id
* @return mixed
*/
public function actionUpdate($id)
{
    $model = $this->findModel($id);
    $model->scenario = 'user_update';



    
        if ($model->load(\Yii::$app->request->post()) && !empty(\Yii::$app->request->post())) {

            try {
                $password=$_POST['User']['password'];
                $confirm_password=$_POST['User']['confirm_password'];
                if(!empty($password)){
                    if($password==$confirm_password){
                        $model->generateAuthKey();
                        $model->setPassword($_POST['User']['password']);  
                    }else{
                        if(empty($confirm_password)){
                            $model->password=$_POST['User']['password'];
                            $model->addError('confirm_password','confirm password can not blank');   
                        }else{
                            $model->password=$_POST['User']['password'];
                            $model->confirm_password=$_POST['User']['confirm_password'];

                            $model->addError('password','confirm password not Equal to password');                 
                        }
                        return $this->render('update', [
                            'model' => $model,
                            ]);
                    }
                }else if(!empty($confirm_password)){
                        $model->addError('password','password can not blank');
                        $model->confirm_password=$_POST['User']['confirm_password'];
                        return $this->render('update', [
                            'model' => $model,
                            ]);
                }
   
            $model->save();

            $history = new History;
            $history->saveHistory(History::TYPE_USER,$model->id,"Updated");
        }catch (\Exception $e) {
            $transaction->rollBack();
            $msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
            $model->addError('_exception', $msg);

        }
        return $this->redirect(Url::previous());
    } else {
    return $this->render('update', [
    'model' => $model,
    ]);
    }
}

/**
* Deletes an existing User model.
* If deletion is successful, the browser will be redirected to the 'index' page.
* @param integer $id
* @return mixed
*/
public function actionDelete($id)
{
try {
$this->findModel($id)->delete();
} catch (\Exception $e) {
$msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
\Yii::$app->getSession()->addFlash('error', $msg);
return $this->redirect(Url::previous());
}

// TODO: improve detection
$isPivot = strstr('$id',',');
if ($isPivot == true) {
return $this->redirect(Url::previous());
} elseif (isset(\Yii::$app->session['__crudReturnUrl']) && \Yii::$app->session['__crudReturnUrl'] != '/') {
Url::remember(null);
$url = \Yii::$app->session['__crudReturnUrl'];
\Yii::$app->session['__crudReturnUrl'] = null;

return $this->redirect($url);
} else {
return $this->redirect(['index']);
}
}

/**
* Finds the User model based on its primary key value.
* If the model is not found, a 404 HTTP exception will be thrown.
* @param integer $id
* @return User the loaded model
* @throws HttpException if the model cannot be found
*/
protected function findModel($id)
{
if (($model = User::findOne($id)) !== null) {
return $model;
} else {
throw new HttpException(404, 'The requested page does not exist.');
}
}
}
