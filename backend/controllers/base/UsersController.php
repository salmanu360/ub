<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\controllers\base;

use common\models\Users;
use common\models\User;
use backend\models\search\User as UserSearch;
use yii\web\Controller;
use yii\web\HttpException;
use yii\helpers\Url;
use yii\filters\AccessControl;
use kartik\grid\EditableColumnAction;
use yii\data\ActiveDataProvider;

/**
* UsersController implements the CRUD actions for Users model.
*/
class UsersController extends Controller
{
    /**
    * @var boolean whether to enable CSRF validation for the actions in this controller.
    * CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
    */
    public $enableCsrfValidation = false;


    public function actions() {
        return [
            'editable-column-update' => [
                'class' => EditableColumnAction::className(), // action class name
                'modelClass' => Users::className(),
            ],
        ];
    }    
    
    /**
    * Lists all Users models.
    * @return mixed
    */
    // public function actionIndex()
    // {
    //     $searchModel  = new UsersSearch;
    //     $dataProvider = $searchModel->search($_GET);

    //     Url::remember();
    //     \Yii::$app->session['__crudReturnUrl'] = null;

    //     return $this->render('index', [
    //         'dataProvider' => $dataProvider,
    //         'searchModel' => $searchModel,
    //     ]);
    // }

public function actionTelecmi()
    {
        // API URL
        $url = 'https://rest.telecmi.com/v2/webrtc/click2call';

        // Create a new cURL resource
        $ch = curl_init($url);

        // Setup request to send json via POST
        $data = array(
            'user_id' => '111_2224004',
            'secret' => '6e8d7fa1-d6a6-422e-bf27-4158bdce1053',
            'to' => '919717850026',
            //'extra_params': {'crm': true},
            'webrtc' => true,
            'followme' => false,
        );
        $payload = json_encode(array("user" => $data));

        // Attach encoded JSON string to the POST fields
        curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);

        // Set the content type to application/json
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));

        // Return response instead of outputting
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

        // Execute the POST request
        $result = curl_exec($ch);
        if ( $result) {
            
        }else{
            die("Error: call to URL $url failed with status $status, response $json_response, curl_error " . curl_error($curl) . ", curl_errno " . curl_errno($curl));

        }
        // Close cURL resource
        curl_close($ch);




        /* $url = "https://rest.telecmi.com/v2/webrtc/click2call";    
        $content = json_encode('
            "user_id": "111_2224004",
            "secret": "6e8d7fa1-d6a6-422e-bf27-4158bdce1053",
            "to": 919717850026,
            "extra_params": {"crm": true},
            "webrtc": true,
            "followme": false
        ');
        $curl = curl_init($url);
        curl_setopt($curl, CURLOPT_HEADER, false);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($curl, CURLOPT_HTTPHEADER,
                array("Content-type: application/json"));
        curl_setopt($curl, CURLOPT_POST, true);
        curl_setopt($curl, CURLOPT_POSTFIELDS, $content);

        $json_response = curl_exec($curl);

        $status = curl_getinfo($curl, CURLINFO_HTTP_CODE);

        if ( $status != 201 ) {
            die("Error: call to URL $url failed with status $status, response $json_response, curl_error " . curl_error($curl) . ", curl_errno " . curl_errno($curl));
        }
        curl_close($curl);
        $response = json_decode($json_response, true); */
}
public function actionIndex()
{

    /*var_dump(\Yii::$app->user->identity->id);
    var_dump(\Yii::$app->user->identity->type);
    die();*/
    $searchModel  = new UserSearch;
    $dataProvider = $searchModel->search($_GET);


    Url::remember();
    \Yii::$app->session['__crudReturnUrl'] = null;

    return $this->render('index', [
    'dataProvider' => $dataProvider,
        'searchModel' => $searchModel,
    ]);
    }

    /**
     * Displays a single Users model.
     * @param integer $id
     *
     * @return mixed
     */
    public function actionView($id)
    {
        \Yii::$app->session['__crudReturnUrl'] = Url::previous();
        Url::remember();

        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new Users model.
     * If creation is successful, the browser will be redirected 
     *  to the 'view' page or back, if parameter $goBack is true.
     * @return mixed
     */
    public function actionCreate()
{
        $model = new User;
       if ($model->load(\Yii::$app->request->post()) &&  $model->validate()) {
                 //$model->validate();
                // var_dump(\Yii::$app->request->post());
                //  var_dump($model->attributes);
                //  var_dump($model->errors);
                  //die();

                try {
                        $model->type=$_POST['User']['type'];
                        $transaction = \Yii::$app->db->beginTransaction();
                        $model->generateAuthKey();
                        $model->generateEmailVerificationToken();
                        $model->setPassword($_POST['User']['password']);                       
                     if($model->save()){

                            // $history = new History;
                            // $history->saveHistory(History::TYPE_USER,$model->id,"Created");
                            $transaction->commit();                            
                        }
                        else{
                            \Yii::debug($model);
                            throw new Exception;
                        }
                      //  $transaction->commit();
                } catch (\Exception $e) {
                        throw $e;
                        $transaction->rollBack();
                        $msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
                        $model->addError('_exception', $msg);
                }
               // if(Yii::$app->user->identity->id != 238 || Yii::$app->user->identity->id != 4){
                   return $this->redirect(['view', 'id' => $model->id]);
                // }else{
                //    return $this->redirect(['user-access', 'user_id' => $model->id]);
                // }

        }elseif (!\Yii::$app->request->isPost) {           
              $model->load($_GET);

        }
        return $this->render('create', ['model' => $model]);
}

    
    /**
     * Add a new TestContacts record for relation grid and redirect back.
     * @return mixed
     */
    public function actionCreateForRel()
    {
        $model = new Users;
        $model->load($_GET);
        $relAttributes = $model->attributes;
        $model->save();
        return $this->goBack();
    }
    
    /**
    * Updates an existing Users model.
    * If update is successful, the browser will be redirected to the 'view' page.
    * @param integer $id
    * @return mixed
    */
    public function actionUpdate($id)
    {
        $model = User::find()->where(['id'=>$id])->one();
    
    
    
        
            if ($model->load(\Yii::$app->request->post()) && !empty(\Yii::$app->request->post())) {
    
                try {
                    $password=$_POST['User']['password'];
                    $confirm_password=$_POST['User']['confirm_password'];
                    if(!empty($password)){
                        if($password==$confirm_password){
                            $model->generateAuthKey();
                            $model->setPassword($_POST['User']['password']);  
                        }else{
                            if(empty($confirm_password)){
                                $model->password=$_POST['User']['password'];
                                $model->addError('confirm_password','confirm password can not blank');   
                            }else{
                                $model->password=$_POST['User']['password'];
                                $model->confirm_password=$_POST['User']['confirm_password'];
    
                                $model->addError('password','confirm password not Equal to password');                 
                            }
                            return $this->render('update', [
                                'model' => $model,
                                ]);
                        }
                    }else if(!empty($confirm_password)){
                            $model->addError('password','password can not blank');
                            $model->confirm_password=$_POST['User']['confirm_password'];
                            return $this->render('update', [
                                'model' => $model,
                                ]);
                    }
       
                $model->save();
    
            }catch (\Exception $e) {
                $transaction->rollBack();
                $msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
                $model->addError('_exception', $msg);
    
            }
            return $this->redirect(['index']);
        } else {
        return $this->render('update', [
        'model' => $model,
        ]);
        }
    }


    public function actionChangepass($id)
    {
        $model = User::find()->where(['id'=>$id])->one();
            if ($model->load(\Yii::$app->request->post()) && !empty(\Yii::$app->request->post())) {
                try {
                    $password=$_POST['User']['password'];
                    $confirm_password=$_POST['User']['confirm_password'];
                    if(!empty($password)){
                        if($password==$confirm_password){
                            $model->generateAuthKey();
                            $model->setPassword($_POST['User']['password']);  
                        }else{
                            if(empty($confirm_password)){
                                $model->password=$_POST['User']['password'];
                                $model->addError('confirm_password','confirm password can not blank');   
                            }else{
                                $model->password=$_POST['User']['password'];
                                $model->confirm_password=$_POST['User']['confirm_password'];
    
                                $model->addError('password','confirm password not Equal to password');                 
                            }
                            return $this->render('update', [
                                'model' => $model,
                                ]);
                        }
                    }else if(!empty($confirm_password)){
                            $model->addError('password','password can not blank');
                            $model->confirm_password=$_POST['User']['confirm_password'];
                            return $this->render('update', [
                                'model' => $model,
                                ]);
                    }
       
                $model->save();
    
            }catch (\Exception $e) {
                $transaction->rollBack();
                $msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
                $model->addError('_exception', $msg);
    
            }
            return $this->redirect(Url::previous());
        } else {
        return $this->render('changepass', [
        'model' => $model,
        ]);
        }
    }
    
    
     public function actionChangerecruiterpass($id)
    {
        /* if (!Yii::$app->user->can('change-password')) {
            throw new ForbiddenHttpException;
        } */
        $model = User::find()->where(['id'=>$id])->one();
            if ($model->load(\Yii::$app->request->post()) && !empty(\Yii::$app->request->post())) {
                try {
                    $password=$_POST['User']['password'];
                    $confirm_password=$_POST['User']['confirm_password'];
                    if(!empty($password)){
                        if($password==$confirm_password){
                            $model->generateAuthKey();
                            $model->setPassword($_POST['User']['password']);  
                        }else{
                            if(empty($confirm_password)){
                                $model->password=$_POST['User']['password'];
                                $model->addError('confirm_password','confirm password can not blank');   
                            }else{
                                $model->password=$_POST['User']['password'];
                                $model->confirm_password=$_POST['User']['confirm_password'];
    
                                $model->addError('password','confirm password not Equal to password');                 
                            }
                            return $this->render('update', [
                                'model' => $model,
                                ]);
                        }
                    }else if(!empty($confirm_password)){
                            $model->addError('password','password can not blank');
                            $model->confirm_password=$_POST['User']['confirm_password'];
                            return $this->render('update', [
                                'model' => $model,
                                ]);
                    }
       
                $model->save();

    
            }catch (\Exception $e) {
                $transaction->rollBack();
                $msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
                $model->addError('_exception', $msg);
    
            }
            return $this->redirect(['recruiters/index']);
            // return $this->redirect(Url::previous());
        } else {
        return $this->render('changepass', [
        'model' => $model,
        ]);
        }
    }


    

    /**
    * Deletes an existing Users model.
    * If deletion is successful, the browser will be redirected to the 'index' page.
    * @param integer $id
    * @return mixed
    */
    public function actionDelete($id)
    {
        try {
            $this->findModel($id)->delete();
        } catch (\Exception $e) {
            $msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
            \Yii::$app->getSession()->addFlash('error', $msg);
            return $this->redirect(Url::previous());
        }

        $model = new Users;
        $model->load($_GET);
        $relAttributes = $model->attributes;       
        if($relAttributes){
            return $this->redirect(Url::previous());
        }        
        
        // TODO: improve detection
        $isPivot = strstr('$id',',');
        if ($isPivot == true) {
            return $this->redirect(Url::previous());
        } elseif (isset(\Yii::$app->session['__crudReturnUrl']) && \Yii::$app->session['__crudReturnUrl'] != '/') {
            Url::remember(null);
            $url = \Yii::$app->session['__crudReturnUrl'];
            \Yii::$app->session['__crudReturnUrl'] = null;

            return $this->redirect($url);
        } else {
            return $this->redirect(['index']);
        }
    }

    /**
    * Update Users model record by editable.
    * @param integer $id
    * @return mixed
    */    
    public function actionEditable($id){
        
        // Check if there is an Editable ajax request
        if (!isset($_POST['hasEditable'])) {
            return false;
        }
        
        $post = [];
        foreach($_POST as $name => $value){
            //if(in_array($name,$this->editAbleFileds)){
                $post[$name] = $value;
            //}
        }
        
        // use Yii's response format to encode output as JSON
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;        
        if(!$post){
            return ['output'=>'', 'message'=> 'Can not update this field'];
        }

        $model = $this->findModel($id);
        $model->setAttributes($post, true);
        // read your posted model attributes
        if ($model->save()) {
            // read or convert your posted information
            $value = $model->$name;

            // return JSON encoded output in the below format
            return ['output'=>$value, 'message'=>''];

            // alternatively you can return a validation error
            // return ['output'=>'', 'message'=>'Validation error'];
        }
        // else if nothing to do always return an empty JSON encoded output
        else {
            //  return ['output'=>'', 'message'=>''];
            $errors = [];
            foreach($model->errors as $field => $messages){
                foreach($messages as $message){
                    $errors[] = $model->getAttributeLabel($field) 
                            . ': '
                            . $message;
                }
            }
            return ['output'=>'', 'message'=>implode('<br>',$errors)];
            
        }
        
    }    

    /**
    * Finds the Users model based on its primary key value.
    * If the model is not found, a 404 HTTP exception will be thrown.
    * @param integer $id
    * @return Users the loaded model
    * @throws HttpException if the model cannot be found
    */
    protected function findModel($id)
    {
        if (($model = User::findOne($id)) !== null) {
            return $model;
        } else {
            throw new HttpException(404, 'The requested page does not exist.');
        }
    }
}
