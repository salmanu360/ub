<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\controllers;
use Yii;
use frontend\models\ForStudents;
use backend\models\ForStudentsSearch;

use frontend\models\StudentSearch;
use common\models\Student;
use common\models\StudentForm;
use common\models\StudentCollegeForm;
use common\models\StudentCollegeAttended;

use yii\web\Controller;
use yii\web\HttpException;
use yii\helpers\Url;
use yii\filters\AccessControl;
use dmstr\bootstrap\Tabs;

/**
* StudentController implements the CRUD actions for ForStudents model.
*/
class StudentController extends Controller
{


/**
* @var boolean whether to enable CSRF validation for the actions in this controller.
* CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
*/
public $enableCsrfValidation = false;


/**
* Lists all ForStudents models.
* @return mixed
*/
/* public function actionIndex()
{
    // $searchModel  = new ForStudentsSearch;
    $searchModel  = new StudentSearch;
    $dataProvider = $searchModel->search($_GET);

Tabs::clearLocalStorage();

Url::remember();
\Yii::$app->session['__crudReturnUrl'] = null;

return $this->render('index', [
'dataProvider' => $dataProvider,
    'searchModel' => $searchModel,
]);
} */

public function actionViewstudentlist($id)
    {
        $model2=new \common\models\StudentPendingDocument;
        if ($this->request->isPost) {
            $model2->lead_status=$_POST['lead_status'];
            $model2->pending_document=$_POST['pending_document'];
            $model2->comment=$_POST['comment'];
            $model2->student_id=$id;
            $model2->created_by=Yii::$app->user->id;
            $model2->save(false);
            $student=Student::find()->where(['ID'=>$id])->one();
            $student->lead_status=$_POST['lead_status'];
            $student->save(false);
            $this->redirect(['studentlist']);

        }
        $student=Student::find()->where(['ID'=>$id])->one();
        return $this->render('student_list_view', [
            'student' => $student,
            'model2' => $model2,
            ]);
    }
public function actionStudentlist()
    {
        $searchModel  = new StudentSearch;
        $dataProvider = $searchModel->searchreport($_GET);
        Tabs::clearLocalStorage();
        return $this->render('student_list', [
            'dataProvider' => $dataProvider,
                'searchModel' => $searchModel,
            ]);
    }

   
 public function actionReport()
    {
        $searchModel  = new StudentSearch;
        $dataProvider = $searchModel->searchreportadmin($_GET);
        Tabs::clearLocalStorage();
        return $this->render('student_report', [
            'dataProvider' => $dataProvider,
                'searchModel' => $searchModel,
            ]);

    }
    
    public function actionExport(){
        error_reporting(0);
        //echo $_GET['id'];die;
        // echo '<pre>';print_r($_GET);die;
        if(isset($_GET['start']) && empty($_GET['id'])){
            
            $start_date =$_GET['start'];
            $end_date_convert =$_GET['end'];
            $end_date =date('Y-m-d', strtotime("+1 day", strtotime($end_date_convert)));
            $where = "created_date BETWEEN '".date($start_date)."' and '".date($end_date)."'";
            $model=Student::find()->where($where)->orderBy(['ID'=>SORT_DESC])->All(); 
        }else if(isset($_GET['start']) && isset($_GET['id'])){
            
            $start_date =$_GET['start'];
            $end_date_convert =$_GET['end'];
            $end_date =date('Y-m-d', strtotime("+1 day", strtotime($end_date_convert)));
            $where = "lead_status='".$_GET['id']."' and created_date BETWEEN '".date($start_date)."' and '".date($end_date)."'";
            $model=Student::find()->where($where)->orderBy(['ID'=>SORT_DESC])->All(); 
        }else{
             if(isset($_GET['id'])){
                $get_id=$_GET['id'];
                $model=Student::find()->where(['lead_status'=>$get_id])->orderBy(['ID'=>SORT_DESC])->All();
            }else{
                $model=Student::find()->orderBy(['ID'=>SORT_DESC])->All();
            }
        }
        $filename = 'Data-'.Date('YmdGis').'-studentreport.xls';
        header("Content-type: application/vnd-ms-excel");
        header("Content-Disposition: attachment; filename=".$filename);
        return $this->renderPartial('export_student',['model'=>$model]);
    
    }
    
    public function actionBulkassign(){
         $student_ids=Yii::$app->request->post('bulk_student');
            foreach($student_ids as $student_id){
                $model=Student::find()->where(['ID'=>$student_id])->one();
                $User=\common\models\User::find()->where(['id'=>$_POST['assign_application_team']])->one();
                $model->assign_application_team=$_POST['assign_application_team'];
                $model->rm_id=Yii::$app->user->id;
                $model->Save(false);
                $Student=\common\models\Student::find()->where(['ID'=>$student_id])->one();
                $notification=new \common\models\Notification();
                $notification->module='Assign student to Application Team';
                $notification->status=0;
                $notification->created_at=date('Y-m-d');
                $notification->created_by='('.Yii::$app->user->identity->username.')';
                $notification->name=$Student->first_name;
                $notification->created_by_id=$Student->ID;
                $notification->receiver_id=6;
                $notification->save(false);

                /* email to owner */
                $mail = Yii::$app->mailer->compose()
                ->setFrom('noreply@universitybureau.com')
                ->setTo('support@universitybureau.com')
                ->setSubject('Assign student to Application Team By RM')
                ->setHtmlBody('
                <p>Hello: admin following student assign to Application Team by RM </p>
                <p>Student: '.$Student->first_name .' '.$Student->last_name.'</p>
                <p>Assign by RM: '.Yii::$app->user->identity->username.'</p>
                ')
                ->send();
                /* email to owner end */

                $mail = Yii::$app->mailer->compose()
                ->setFrom('noreply@universitybureau.com')
                ->setTo($User->email)
                ->setSubject('Assign student to Application Team By RM')
                ->setHtmlBody('
                <p>Hello: following student assign to Application Team by RM </p>
                <p>Student: '.$Student->first_name .' '.$Student->last_name.'</p>
                <p>Assign by RM: '.Yii::$app->user->identity->username.'</p>
                ')
                ->send();


             } 
             $this->redirect(['index']);
    }

    public function actionIndex()
    {
        
        $userid=Yii::$app->user->id;
        $type= Yii::$app->user->identity->type;

        $searchModel  = new StudentSearch;
        $dataProvider = $searchModel->searchadmin($_GET);
        Tabs::clearLocalStorage();

        Url::remember();
        \Yii::$app->session['__crudReturnUrl'] = null;
        if($type == 5){
            return $this->render('index_rm', [
                'dataProvider' => $dataProvider,
                    'searchModel' => $searchModel,
                ]);
        }else if($type == 6){
            $dataProviderapplicationteam = $searchModel->searchapplicationteam($_GET);
            return $this->render('index_applicationteam', [
                'dataProvider' => $dataProviderapplicationteam,
                    'searchModel' => $searchModel,
                ]);
        }else{
            return $this->render('index', [
                'dataProvider' => $dataProvider,
                    'searchModel' => $searchModel,
                ]);
        }
       
    }
    
    
    public function actionChangelead($id){
        $model = $this->findModel($id);
        if(Yii::$app->request->isPost){
            $model->lead_status=$_POST['Student']['lead_status'];
            $model->Save(false);
                $lead=\common\models\LeadStatuses::find()->where(['id'=>$_POST['Student']['lead_status']])->one();
                $notification=new \common\models\Notification();
                $notification->module='student lead changed';
                $notification->status=0;
                $notification->created_at=date('Y-m-d');
                $notification->created_by='('.Yii::$app->user->identity->username.')';
                $notification->name=$model->first_name .' ('.$lead->name.')';
                $notification->created_by_id=$model->ID;
                $notification->receiver_id=$model->recruiter_id;
                $notification->save(false);

                $Recruiters=\common\models\Recruiters::findOne($model->recruiter_id);
                $Recruitersemail=$Recruiters->email;
                $mail = Yii::$app->mailer->compose()
                        ->setFrom('noreply@universitybureau.com')
                        //->setTo('salman.u360@gmail.com')
                        ->setTo($Recruitersemail)
                        ->setSubject('Student lead status changed')
                        ->setHtmlBody('
                        <p>Hello: '.$Recruiters->owner_first_name.' </p>
                        <p>The below student lead status changed by '.Yii::$app->user->identity->username.'</p>
                        <p>Student: '.$model->first_name.' '.$model->last_name .'</p>
                        <p>Lead: '.$lead->name.'</p>
                        ')
                        ->send();

                $mail = Yii::$app->mailer->compose()
                ->setFrom('noreply@universitybureau.com')
                ->setTo('support@universitybureau.com')
                ->setSubject('Student lead status changed')
                ->setHtmlBody('
                <p>Hello: </p>
                <p>The below student lead status changed by '.Yii::$app->user->identity->username.'</p>
                <p>Student: '.$model->first_name.' '.$model->last_name .'</p>
                <p>Lead: '.$lead->name.'</p>
                ')
                ->send();
            $this->redirect(['index']);
        }
        return $this->render('changelead', [
            'id' => $id,
            'model' => $model,
        ]);
    }
    
     public function actionDisapprove($id){
        
        $model = $this->findModel($id);
        try{
            $model->status=0;
            $model->save(false);
            $Recruiters=\common\models\Recruiters::find()->where(['id'=>$model->recruiter_id])->one();

            $notification=new \common\models\Notification();
            $notification->created_by='RM ('.Yii::$app->user->identity->username.')';
            $notification->created_at=date('Y-m-d');
            $notification->module='Student Disapproved';
            $notification->name=$model->first_name;
            $notification->created_by_id=$model->ID;
            $notification->save(false);
            $mail = Yii::$app->mailer->compose('recruiter/recruiter-reject')
                ->setFrom('noreply@universitybureau.com')
                //->setTo('amitrkumar715@gmail.com')
                //->setTo('salman.u360@gmail.com')
                ->setTo($Recruiters->email)
               ->setSubject('Student Disapproved from RM')                     
               ->setHtmlBody('
                        <p>Student disapproved by RM</p>
                        <p>Student First Name: '.$model->first_name.'</p>
                        <p>Student Last Name: '.$model->last_name.'</p>
                        <p>Birth Date: '.date('d-M-Y',strtotime($model->birth_date)).'</p>
                        <p>Email: '.$model->email_id.'</p>
                        <p>Phone: '.$model->phone_no.'</p>
                        <p>Gender: '.$model->gender.'</p>
                        ')->send();
            
            \Yii::$app->getSession()->addFlash('success', "Student has been successfully Disapproved.");
           return $this->redirect(['index']);
        }catch(\Exception $e) {
            \Yii::$app->getSession()->addFlash('error', "Internal serve Error ");
        }
        
    } 
    
    public function actionApprove($id){
        $model = $this->findModel($id);
        try{
            $model->status=1;
            $model->save(false);
            $Recruiters=\common\models\Recruiters::find()->where(['id'=>$model->recruiter_id])->one();

            $notification=new \common\models\Notification();
            $notification->created_by='RM ('.Yii::$app->user->identity->username.')';
            $notification->created_at=date('Y-m-d');
            $notification->module='Student Approved';
            $notification->name=$model->first_name;
            $notification->created_by_id=$model->ID;
            $notification->save(false);

            $mail = Yii::$app->mailer->compose('recruiter/recruiter-reject')
                ->setFrom('noreply@universitybureau.com')
                //->setTo('salman.u360@gmail.com')
                ->setTo($Recruiters->email)
               ->setSubject('Student Approved from RM')  
               ->setHtmlBody('
                        <p>Student Approved by RM</p>
                        <p>Student First Name: '.$model->first_name.'</p>
                        <p>Student Last Name: '.$model->last_name.'</p>
                        <p>Birth Date: '.date('d-M-Y',strtotime($model->birth_date)).'</p>
                        <p>Email: '.$model->email_id.'</p>
                        <p>Phone: '.$model->phone_no.'</p>
                        <p>Gender: '.$model->gender.'</p>
                        ')->send(); 
            
            \Yii::$app->getSession()->addFlash('success', "Student has been successfully Approved.");
            $this->redirect(['index']);
        }catch(\Exception $e) {
            \Yii::$app->getSession()->addFlash('error', "Internal serve Error ");
        }
        
    } 

/**
* Displays a single ForStudents model.
* @param integer $id
*
* @return mixed
*/
    public function actionView($ID)
    {
        $model=Student::findOne($ID);
        // echo '<pre>';print_r($model);die;
        // echo $model->ID;die;
        \Yii::$app->session['__crudReturnUrl'] = Url::previous();
        Url::remember();
        Tabs::rememberActiveState();

        return $this->render('view', [
        'model' =>$model,
        ]);
    }


    public function actionDownloaddocument($id,$c)
    {
        //echo $c;die;
        $model =  Student::findOne($id);
        $file=$model->ten_certificate;
        $mainpath = Yii::getAlias('@webroot/');
        $convertPath = str_ireplace('/backend/web', '/frontend/web',$mainpath);
        $mainroot=$convertPath.'uploads/doc_student/'.$c;
        if (file_exists($mainroot)) {
            return Yii::$app->response->sendFile($mainroot);
        } else {
            throw new \yii\web\NotFoundHttpException("{$file} is not found!");
        }
    }
    
    public function actionShowdocument($id,$c)
    {
        
        $model =  Student::findOne($id);
        return $this->render('show_doc', ['model' => $model,'c'=>$c]);
       
    }
    
    

/**
* Creates a new ForStudents model.
* If creation is successful, the browser will be redirected to the 'view' page.
* @return mixed
*/
/* public function actionCreate()
{
$model = new Student;

try {
if ($model->load($_POST) && $model->save()) {
return $this->redirect(['view', 'id' => $model->id]);
} elseif (!\Yii::$app->request->isPost) {
$model->load($_GET);
}
} catch (\Exception $e) {
$msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
$model->addError('_exception', $msg);
}
return $this->render('create', ['model' => $model]);
} */

public function actionCreate() {
     $model = new Student;
     $model->scenario = Student::SCENARIO_STUDENT_REGISTER;
     // $model->scenario = Student::SCENARIO_UPDATE;

     try {
         if(Yii::$app->request->isPost){
             if ($model->load($_POST)) {
                 $country_of_interest = implode(',', $model->country_of_interest);
                 $service_of_interest = implode(',', $model->service_of_interest);

                 $model->recruiter_id = Yii::$app->user->id;
                 $model->country_of_interest = $country_of_interest;
                 $model->service_of_interest = $service_of_interest;
                 if($model->save(false)){
                     $notification=new \common\models\Notification();
                     $notification->created_by='Admin ('.Yii::$app->user->identity->recruiter->owner_first_name.')';
                     $notification->created_at=date('Y-m-d');
                     $notification->module='Student Create';
                     $notification->name=$model->first_name;
                     $notification->created_by_id=$model->ID;
                     $notification->save(false);

                     $History=new \common\models\History();
                     $History->module='student ('.$model->first_name.')';
                     $History->action='Create';
                     $History->created_at=date('Y-m-d');
                     $History->created_by='Admin ('.Yii::$app->user->identity->recruiter->owner_first_name.')';
                     $History->save(false);

                     $leadStatus=\common\models\Student::leadStatus();
                     $country_of_citizenship=\common\models\Country::optsCountry();
                     $referral_source=\common\models\Student::referralSource();
                     $countryInterest=\common\models\Student::countryInterest();
                     $service_of_interest=\common\models\Student::servicesInterest();
                     
                   
                     return $this->redirect(['view', 'ID' => $model->ID]);
                 }
             }
         }
     } catch (\Exception $e) {
         $msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
         $model->addError('_exception', $msg);
     }
     return $this->render('create', ['model' => $model]);
 }

/**
* Updates an existing ForStudents model.
* If update is successful, the browser will be redirected to the 'view' page.
* @param integer $id
* @return mixed
*/
public function actionUpdate($ID) {
    // $this->layout = 'inner';

    $studentModel = new StudentForm();
    $collegeModel = new StudentCollegeForm();
   
    $studentModel->loadStudentProfile($ID);
    $collegeModel->loadCollegeAttended($ID);
    
    if(Yii::$app->request->isPost) {
        /*echo "<pre>";
        var_dump($studentModel->validate());
        var_dump($studentModel->getErrors());
        die();*/
        
        if ($studentModel->load(Yii::$app->request->post()) && $collegeModel->load(Yii::$app->request->post())) {
           
            //$transaction = \Yii::$app->db->beginTransaction();
            try  {
                // echo '<pre>';print_r($_POST);die;
                $collegeModel->saveStudentCollege($ID);
                $studentModel->saveStudentProfile();
               //return $this->redirect(Url::previous());
                 return $this->redirect(['update', 'ID' => $ID]);
                
                //Yii::$app->session->setFlash('success', "Student updated succesfully");
               /*  if(!$collegeModel->saveStudentCollege($ID)){
                    $this->addErrors($student->errors);
                    $transaction->rollBack();
                    return $this->redirect(['update', 'ID' => $ID]);
                    Yii::$app->session->setFlash('error', "Student data can't be saved");
                } else {
                    if( $studentModel->saveStudentProfile() ){
                        $transaction->commit();
                        return $this->redirect(Url::previous());
                    } else {
                        $transaction->rollBack();
                        return false;  
                    }
                } */
            } catch (\Exception $e) {
                //$transaction->rollBack();
                return false;
            }
        }
    }        
  
    return $this->render('update', [
        'model' => $studentModel,
        'collegeModel' => $collegeModel
    ]);
}

/**
* Deletes an existing ForStudents model.
* If deletion is successful, the browser will be redirected to the 'index' page.
* @param integer $id
* @return mixed
*/
    public function actionDelete($ID)
    {
        $this->findModel($ID)->delete();

        return $this->redirect(['index']);
    }

/**
* Finds the ForStudents model based on its primary key value.
* If the model is not found, a 404 HTTP exception will be thrown.
* @param integer $id
* @return ForStudents the loaded model
* @throws HttpException if the model cannot be found
*/
protected function findModel($ID)
{
if (($model = Student::findOne($ID)) !== null) {
return $model;
} else {
throw new HttpException(404, 'The requested page does not exist.');
}
}
}
